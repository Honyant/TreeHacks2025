/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat Endpoint
         * @description Accepts a user message, updates the chat history,
         *     processes the message via the internal engine, and returns:
         *       - updated chat history
         *       - entire research graph (nodes and edges)
         */
        post: operations["chat_endpoint_chat_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ChatMessage */
        ChatMessage: {
            role: components["schemas"]["RoleEnum"];
            /** Message */
            message: string;
            /** Id */
            id: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /** ChatMessageCreate */
        ChatMessageCreate: {
            role: components["schemas"]["RoleEnum"];
            /** Message */
            message: string;
        };
        /** ChatMessageOut */
        ChatMessageOut: {
            /** Chat History */
            chat_history: components["schemas"]["ChatMessage"][];
            /** Graph */
            graph: {
                [key: string]: components["schemas"]["NodeV2"];
            };
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** NodeMetadata */
        NodeMetadata: {
            /** Source */
            source: string;
            /** Timestamp */
            timestamp: string;
        };
        /**
         * NodeType
         * @enum {string}
         */
        NodeType: "root" | "text" | "question" | "email" | "call" | "file" | "search";
        /** NodeV2 */
        NodeV2: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            type: components["schemas"]["NodeType"];
            /** Content */
            content: string;
            metadata: components["schemas"]["NodeMetadata"];
            /** Children */
            children: string[];
        };
        /**
         * RoleEnum
         * @enum {string}
         */
        RoleEnum: "user" | "assistant";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    chat_endpoint_chat_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatMessageCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatMessageOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
